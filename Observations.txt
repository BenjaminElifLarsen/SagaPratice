If a specification class contain multiple specification for different data types, the composite extensions requires giving the generic type.
	Not sure, yet, why they are unable to recognise the correct generic version (IsSatisfiedBy) that they should run.
	After all, both sides use the same generic type.
However, since it is possible to compsite the specifications it will allow for some more 'complex' error types, e.g. age above one threshold and below another one and if this fail can cast to a specific error.

An interesting difference between this project and the api backend project. In the api backend the dependency injection did not work if it tried to to create instance of an internal class/interface. They had to be public. 
	Yet, here the same approach is working while the interfaces and classes are internal for some reason. Both solutions use the {domain}ApiServices to help lower the amount of code in Program in the api project.
	The only difference between the two solutions, that could causse this, is the api backend is C Sharp Dotnet 6, while the projects in this solution is using the preview for Dotnet 7.
	From some testing, it needs everything in {domain}Service's ctor to be public, the implementations do not need to be public. The reason {domain}Service is that it is called from outside the project its belong too.
	Domain models also need to be public.
	Seems like the DI is less restrictive than what was first assumed. Expected everything in {domain}ApiServices had to be public too, since it was rquired in the backend.
	The contract interface just need to be public, not the implementation. Thus contracts from Common can be used while keeping the concrete implementations in the domains internal.

DateOnly json converter does not work, it seems like, when reading and so different methods have been changed back to DateTime, while trying to fix the json converter.

If having multiple implications under the same service problems arise with the DI.
	It is capiable of creating internal instances, in a domain, and give it DI internal services from another domain.
	This will not trigger an error and seems to be running fine. 
	This means that for contracts in the Common module it will require having a 'specialised' contract in each domain and this contract being used as a service instead of the one in Common.


Regarding IServiceProvider it is important to store IServiceProvider.CreateScope().ServiceProvider in a variable as calling CreateScope().ServiceProvider.GetService<T>() multiple 
	times will create fully new services, which if depends on other services these will not have knowledge of services created via other CreateScope()... or depedency injected by the system.
	If storing the IServiceProvider.CreateScope().ServiceProvider all created instances that depends on other created instances will use each other rather than fully new ones. 
	E.g. this will work, the concreate implementation of IRoutingRegistry will use the same IPersonCommandBus as the one created as a parameter.
		var serviceProvider = provider.CreateScope().ServiceProvider;
			Seeder.MockSeedData(serviceProvider.GetService<IPersonContext>(), 
				serviceProvider.GetService<IUnitOfWork>(), 
				serviceProvider.GetService<IPersonCommandBus>(),
				serviceProvider.GetService<IEnumerable<IRoutingRegistry>>(),
				serviceProvider.GetService<IEnumerable<IProcessManagerRouter>>());
	If instead of storing the IServiceProvider.CreateScope().ServiceProvider as a variable and replacing serviceProvider in each line with provider.CreateScope().ServiceProvider,
		the the IRoutingRegistry's IPersonCommandBus and the IPersonCommandBus parameter will be different objects, thus the routing is sat up in one IPersonCommandBus and the dispatch in the other is called, which does not know any routes. 




