When figured out how to best do Saga, make generic version or similar and add to Common project and then push the Common project.

since dealing with events for the saga, maybe look into event sourcing at the same time.

consider based your solution on the Domain Events section from https://vaadin.com/blog/ddd-part-2-tactical-domain-driven-design#_guideline_2_refer_to_other_aggregates_by_id
but code to work with the idea of no service can run all the time
also look at Domain Services


when updating, data should be validated before updating the entities and the entities should validate the data themsevles too and return an interger if data is invalid

The person domain should use the other folder structure than the vehicle domain

https://learn.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation


rename everything that use 'People' in the Vehicle domain to 'Operator'


Consider how to best use ISpecification regarding entity update. If having e.g. a ISpecification<int>, the model can validate before changing value.
	But if using e.g. ISpecification<Person> then it is locked to the model and ensure ISpecification cannot be used with 'any random' value, but it require updating the value first and then validate. This could put the entity in an invalid status.
	Could recover to the pre-updated value by saving it as a temp in the update method, but not the prettist solution.
	All cases return an int, 0 is valid else an enum int


Handler ISoftDelete and ISoftDeleteDate in the 'context' files

throw in jwt
two users, one with permission for everything, the other only for some aggregate roots / domains / commands / queries.
set up hasher and salter in security project. Project should have an user model (not all people are users), with id, password (hashed and salted) and username/email.

split up some classes/interfaces to better follow the single responsibility principle.


vehicle event sourcing: Could event source when the vehicle was in use and stopped be in use (operator id, time, bool started, distance moved)





