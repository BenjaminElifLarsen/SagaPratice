When figured out how to best do Saga, make generic version or similar and add to Common project and then push the Common project.

consider based your solution on the Domain Events section from https://vaadin.com/blog/ddd-part-2-tactical-domain-driven-design#_guideline_2_refer_to_other_aggregates_by_id
but code to work with the idea of no service can run all the time
also look at Domain Services

https://learn.microsoft.com/en-us/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation

throw in jwt
two users, one with permission for everything, the other only for some aggregate roots / domains / commands / queries.
set up hasher and salter in security project. Project should have an user model (not all people are users), with id, password (hashed and salted) and username/email.

split up some classes/interfaces to better follow the single responsibility principle.

consider moving the repos in Vehicle.DL into the IPL 
	figure out what layer would be best for the busses.
		parts:
			event bus
			event handler
			command bus
			command handler
		communication:
			the event handler would communicate with the command bus.
			command bus would communicate with the command handler.
			command handler can create events that are stored in the domain models
			the unit of work publishes, via the event bus, the events.
			the events should be handled by the event handler. 
		dependencies:
			event bus got no dependencies
			event handler needs to talk to the command bus
			the command bus got no dependencies
			the command handler does not talk with any of those parts as events are processed in unit of work
				unit of work needs to talk with the event bus
		possible problem:
			event bus depends on event handler which depends on command bus which depends on command handler which depends on unit of work which depends on event bus which...
			wait, does the busses really depend on the handlers? The handlers need to registrate themselves in the busses, but the busses themselves should have no knowledge of the handler contracts. The busses just want Action<T>s where T : IDomainEvent/ICommand
			ensure you are correct and update dependencies as busses have no dependencies. 
		considerations:
			fact: communication to the layer below is permitted, but not the layer above.
			The busses needs to talk with the handlers. At least the command handler depends on DL and IPL, because of the DL dependency it cannot be placed there.
			Thus the handlers are either in the AL or IPL. Since they have nothing to do with the context or persisting of data, IPL does not make sense.
			Thus the handlers are placed in AL.
			The handlers depends on the busses and are thus also stored in the AL. The busses could be placed in the domain model layer, but they are not domain models, so maybe just keep them in the AL
			(The AL is considered a layer above IPL for me.)
	Need to figuere out how to registrate event and commands in the busses. Done via the {Domain}Registry
	Remember that the controllers also need to talk with the command busses, but this is not important. Done by applying the command bus and unit of work as parameters to the services.

a command:
	can have many senders, but only one receiver
an event:
	has one sender (the publisher), but zero or many receivers

move Operator queries over to their service.

License Type need to deal with CanBeIssedFrom, update specifications, ctor, factory, and error(handling)

instead of From{Thing} for commands, have By{Thing}


if a command fails it should trigger a failer event. Can also have 'partial' completed events, so a handler can transmit success and failer events at the same time, if the bl permits that.
 

add better states to the pms and persist them in a database
https://tech.justeattakeaway.com/2015/05/26/process-managers/
maybe don't modify the old ones, but consider this for the next pms. This will also permit to be compare the different designs.
the old ones should be fine for a basic system like this, but those described in the link could be more useful when it need things like user input or data from outside the system between parts.
	consider it for the buying and selling of vehicles, e.g. a vehicle is first sold when someone has 'ordered' to buy it (which prevents others from buying it) and then payed for it within a timelimit.

look into a better way to handle events regarding storage and aggregates

	maybe update all boundared contexes to the new design, firstly people as it is the more simple one
		keep the current working version, while implementing the new, event, ones

	could use switch cases for storing type of domain event implementation
		so a switch case on type that returns a unique int that identity the concrete domain event
		and a switch case on int that return the type of the concrete domain event

	when loading the events to hydrate an entity figure out where to do it, e.g. public ctor or a new method in the factory? 
	update the seeders to work fully using events


regarding some evnets/commands and process managers maybe some split a little to much. E.g. instead of splitting check permission and start vehicle into two, maybe it could be just one command handler that can generate different domain- and systemevents

let factory (or something like it) set the id of newly created objects
	thus consider switching to Guids

it does not make sense to store the system events in the 'context'. Figure out a better way to store them before they are published.
	could make it such that the command handlers can publish system events. Spend some time reading up to see what others have done 
